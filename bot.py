import logging
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from bs4 import BeautifulSoup
import csv
import re
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def parse_kinopoisk_html_content(content: str):
    """–ü–∞—Ä—Å–∏—Ç HTML –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∏–ª—å–º—ã"""
    soup = BeautifulSoup(content, 'html.parser')
    films = []
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞
    film_items = soup.select('.user-rating-item, .profileFilmsList .item, .film-item, .item')
    
    if not film_items:
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        text_content = soup.get_text()
        lines = text_content.split('\n')
        for line in lines:
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –≥–æ–¥–æ–º –≤ —Å–∫–æ–±–∫–∞—Ö
            year_match = re.search(r'(.+?)\s*\((\d{4})\)', line.strip())
            if year_match and len(year_match.group(1)) > 3:
                title = year_match.group(1).strip()
                year = year_match.group(2)
                films.append({'title': title, 'year': year})
    else:
        for item in film_items:
            # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞
            title_el = item.select_one('.nameRus, .name, .film-name, .film-title, a')
            year_el = item.select_one('.year')
            
            if title_el:
                title_full = title_el.get_text().strip()
                year_match = re.search(r'\((\d{4})\)', title_full)
                year = year_match.group(1) if year_match else (year_el.get_text().strip() if year_el else '')
                title = re.sub(r'\s*\(\d{4}\)', '', title_full).strip()
                
                if title and len(title) > 2:  # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                    films.append({'title': title, 'year': year})
    
    return films

def films_to_csv(films):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –≤ CSV –¥–ª—è Letterboxd"""
    output = io.StringIO()
    writer = csv.writer(output)
    writer.writerow(['Title', 'Year', 'Rating', 'WatchedDate', 'imdbID', 'tmdbID'])
    
    for film in films:
        writer.writerow([film['title'], film['year'], '', '', '', ''])
    
    output.seek(0)
    return output.getvalue().encode('utf-8')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """üé¨ –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kinopoisk to Letterboxd Bot!

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–≤–æ–∏ —Ñ–∏–ª—å–º—ã –∏–∑ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –≤ Letterboxd.

üìã –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
1Ô∏è‚É£ –ó–∞–π–¥–∏ –Ω–∞ —Å–≤–æ—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ü–µ–Ω–æ–∫ –≤ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ
2Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ HTML —Ñ–∞–π–ª (Cmd+S ‚Üí "–í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é")
3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —ç—Ç–æ—Ç HTML —Ñ–∞–π–ª
4Ô∏è‚É£ –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–π CSV –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ Letterboxd

üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:
‚Ä¢ –¢–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏ –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ: https://www.kinopoisk.ru/user/–¢–í–û–ô_ID/votes/
‚Ä¢ –ò–º–ø–æ—Ä—Ç –≤ Letterboxd: https://letterboxd.com/import

–ì–æ—Ç–æ–≤? –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ HTML —Ñ–∞–π–ª! üöÄ"""
    
    await update.message.reply_text(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:

–®–∞–≥ 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞
‚Ä¢ –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: https://www.kinopoisk.ru/user/–¢–í–û–ô_ID/votes/
‚Ä¢ –ù–∞–∂–º–∏ Cmd+S (–∏–ª–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é "–§–∞–π–ª" ‚Üí "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫...")
‚Ä¢ –í—ã–±–µ—Ä–∏ "–í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é" 
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏ —Ñ–∞–π–ª

–®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –±–æ—Ç—É
‚Ä¢ –ü—Ä–∏–∫—Ä–µ–ø–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π .html —Ñ–∞–π–ª –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ

–®–∞–≥ 3: –ò–º–ø–æ—Ä—Ç –≤ Letterboxd
‚Ä¢ –ü–æ–ª—É—á–∏ –æ—Ç –º–µ–Ω—è –≥–æ—Ç–æ–≤—ã–π CSV —Ñ–∞–π–ª
‚Ä¢ –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ https://letterboxd.com/import
‚Ä¢ –ó–∞–≥—Ä—É–∑–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π CSV —Ñ–∞–π–ª
‚Ä¢ Letterboxd –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç —Ñ–∏–ª—å–º—ã

‚ùì –ü—Ä–æ–±–ª–µ–º—ã?
–ï—Å–ª–∏ CSV –ø—É—Å—Ç–æ–π - –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª –∏–º–µ–Ω–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—Ü–µ–Ω–∫–∞–º–∏, –∞ –Ω–µ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è.

üí° –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ - Letterboxd –∏—Ö –ø–æ–Ω–∏–º–∞–µ—Ç!"""
    
    await update.message.reply_text(help_text)

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    document = update.message.document
    
    if not document:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å HTML —Ñ–∞–π–ª.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not document.file_name.lower().endswith(('.html', '.htm')):
        await update.message.reply_text("‚ùå –ù—É–∂–µ–Ω –∏–º–µ–Ω–Ω–æ HTML —Ñ–∞–π–ª —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞.")
        return
    
    await update.message.reply_text("‚è≥ –ü–æ–ª—É—á–∞—é –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await document.get_file()
        file_content = await file.download_as_bytearray()
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏
        content_str = None
        for encoding in ['utf-8', 'windows-1251', 'cp1252']:
            try:
                content_str = file_content.decode(encoding)
                break
            except UnicodeDecodeError:
                continue
        
        if not content_str:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥–∏—Ä–æ–≤–∫—É.")
            return
        
        # –ü–∞—Ä—Å–∏–º —Ñ–∏–ª—å–º—ã
        films = parse_kinopoisk_html_content(content_str)
        
        if not films:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã –≤ —Ñ–∞–π–ª–µ.\n\n"
                "–£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—Ü–µ–Ω–∫–∞–º–∏:\n"
                "https://www.kinopoisk.ru/user/–¢–í–û–ô_ID/votes/"
            )
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV
        csv_content = films_to_csv(films)
        csv_file = io.BytesIO(csv_content)
        csv_file.name = 'letterboxd_import.csv'
        
        success_text = f"""‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(films)} —Ñ–∏–ª—å–º–æ–≤!

üìÅ CSV —Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ Letterboxd.

üîó –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1. –°–æ—Ö—Ä–∞–Ω–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π CSV —Ñ–∞–π–ª
2. –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ https://letterboxd.com/import  
3. –ó–∞–≥—Ä—É–∑–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª
4. Letterboxd –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç —Ñ–∏–ª—å–º—ã –≤ —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å

üéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —Ç–≤–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Ñ–∏–ª—å–º–æ–≤ –±—É–¥–µ—Ç –∏ –≤ Letterboxd!"""
        
        await update.message.reply_document(
            document=csv_file,
            filename='letterboxd_import.csv',
            caption=success_text
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await update.message.reply_text(
        "üìÅ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ HTML —Ñ–∞–π–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –∏–∑ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞.\n\n"
        "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏ /help"
    )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.environ.get('TELEGRAM_BOT_TOKEN')
    
    if not token:
        print("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: export TELEGRAM_BOT_TOKEN='—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω'")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = ApplicationBuilder().token(token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=['message'])

if __name__ == '__main__':
    main()
