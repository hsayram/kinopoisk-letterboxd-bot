import logging
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from bs4 import BeautifulSoup
import csv
import re
import io
import asyncio
from aiohttp import web
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def parse_kinopoisk_html_content(content: str):
    """–ü–∞—Ä—Å–∏—Ç HTML –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∏–ª—å–º—ã"""
    soup = BeautifulSoup(content, 'html.parser')
    films = []
    
    film_items = soup.select('.user-rating-item, .profileFilmsList .item, .film-item, .item')
    
    if not film_items:
        text_content = soup.get_text()
        lines = text_content.split('\n')
        for line in lines:
            year_match = re.search(r'(.+?)\s*\((\d{4})\)', line.strip())
            if year_match and len(year_match.group(1)) > 3:
                title = year_match.group(1).strip()
                year = year_match.group(2)
                films.append({'title': title, 'year': year})
    else:
        for item in film_items:
            title_el = item.select_one('.nameRus, .name, .film-name, .film-title, a')
            year_el = item.select_one('.year')
            
            if title_el:
                title_full = title_el.get_text().strip()
                year_match = re.search(r'\((\d{4})\)', title_full)
                year = year_match.group(1) if year_match else (year_el.get_text().strip() if year_el else '')
                title = re.sub(r'\s*\(\d{4}\)', '', title_full).strip()
                
                if title and len(title) > 2:
                    films.append({'title': title, 'year': year})
    
    return films

def films_to_csv(films):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –≤ CSV –¥–ª—è Letterboxd"""
    output = io.StringIO()
    writer = csv.writer(output)
    writer.writerow(['Title', 'Year', 'Rating', 'WatchedDate', 'imdbID', 'tmdbID'])
    
    for film in films:
        writer.writerow([film['title'], film['year'], '', '', '', ''])
    
    output.seek(0)
    return output.getvalue().encode('utf-8')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """üé¨ –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kinopoisk to Letterboxd Bot!

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–≤–æ–∏ —Ñ–∏–ª—å–º—ã –∏–∑ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –≤ Letterboxd.

üìã –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
1Ô∏è‚É£ –ó–∞–π–¥–∏ –Ω–∞ —Å–≤–æ—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ü–µ–Ω–æ–∫ –≤ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ
2Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ HTML —Ñ–∞–π–ª (Cmd+S ‚Üí "–í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é")
3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —ç—Ç–æ—Ç HTML —Ñ–∞–π–ª
4Ô∏è‚É£ –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–π CSV –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ Letterboxd

üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:
‚Ä¢ –¢–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏ –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ: https://www.kinopoisk.ru/user/–¢–í–û–ô_ID/votes/
‚Ä¢ –ò–º–ø–æ—Ä—Ç –≤ Letterboxd: https://letterboxd.com/import

–ì–æ—Ç–æ–≤? –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ HTML —Ñ–∞–π–ª! üöÄ"""
    
    await update.message.reply_text(welcome_text)

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document
    
    if not document:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å HTML —Ñ–∞–π–ª.")
        return
    
    if not document.file_name.lower().endswith(('.html', '.htm')):
        await update.message.reply_text("‚ùå –ù—É–∂–µ–Ω –∏–º–µ–Ω–Ω–æ HTML —Ñ–∞–π–ª —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞.")
        return
    
    await update.message.reply_text("‚è≥ –ü–æ–ª—É—á–∞—é –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")
    
    try:
        file = await document.get_file()
        file_content = await file.download_as_bytearray()
        
        content_str = None
        for encoding in ['utf-8', 'windows-1251', 'cp1252']:
            try:
                content_str = file_content.decode(encoding)
                break
            except UnicodeDecodeError:
                continue
        
        if not content_str:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª.")
            return
        
        films = parse_kinopoisk_html_content(content_str)
        
        if not films:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã –≤ —Ñ–∞–π–ª–µ.")
            return
        
        csv_content = films_to_csv(films)
        csv_file = io.BytesIO(csv_content)
        csv_file.name = 'letterboxd_import.csv'
        
        success_text = f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(films)} —Ñ–∏–ª—å–º–æ–≤!\n\n–ü–µ—Ä–µ–π–¥–∏ –Ω–∞ https://letterboxd.com/import –∏ –∑–∞–≥—Ä—É–∑–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª."
        
        await update.message.reply_document(
            document=csv_file,
            filename='letterboxd_import.csv',
            caption=success_text
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìÅ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ HTML —Ñ–∞–π–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –∏–∑ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞.\n\n"
        "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏ /start"
    )

# Web —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
async def health_check(request):
    return web.Response(text="Bot is running!")

async def run_web_server():
    app = web.Application()
    app.router.add_get('/', health_check)
    app.router.add_get('/health', health_check)
    
    port = int(os.environ.get('PORT', 8080))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    print(f"Web server started on port {port}")

def main():
    token = os.environ.get('TELEGRAM_BOT_TOKEN')
    
    if not token:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def run_bot():
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        application.run_polling(drop_pending_updates=True)
    
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.daemon = True
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    asyncio.run(run_web_server())
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ —Å –±–æ—Ç–æ–º
    bot_thread.join()

if __name__ == '__main__':
    main()
